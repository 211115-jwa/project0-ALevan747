package com.revature.data.postgres;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

import com.revature.beans.Candy;
import com.revature.data.CandyDAO;
import com.revature.utils.ConnectionUtil;

public class CandyPostgres implements CandyDAO {
	private ConnectionUtil connUtil = ConnectionUtil.getConnectionUtil();

	@Override
	public int create(Candy dataToAdd) {
		int generatedId = 0;
		
		// try-with-resources auto-closes resources
		try (Connection conn = connUtil.getConnection()) {
			// when you run DML statements, you want to manage the TCL
			conn.setAutoCommit(false);
			
			String sql = "insert into pet (id,name,brand,flavor) "
					+ "values (default, ?, ?, ?)";
			String[] keys = {"id"}; // the name of the primary key column that will be autogenerated
			// creating the prepared statement
			PreparedStatement pStmt = conn.prepareStatement(sql, keys);
			// we need to set the values of the question marks
			pStmt.setString(1, dataToAdd.getName()); // question mark index starts at 1
			pStmt.setString(2, dataToAdd.getBrand());
			pStmt.setString(3, dataToAdd.getFlavor());
			
			// after setting the values, we can run the statement
			pStmt.executeUpdate();
			ResultSet resultSet = pStmt.getGeneratedKeys();
			
			if (resultSet.next()) { // "next" goes to the next row in the result set (or the first row)
				// getting the ID value from the result set
				generatedId = resultSet.getInt("id");
				conn.commit(); // running the TCL commit statement
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return generatedId;
	}

	// made by vanquish
	@Override
	public Candy getById(int id) {
		Candy candy = null;
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from candy where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, id);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				candy = new Candy();
				candy.setId(id);
				candy.setName(resultSet.getString("name"));
				candy.setBrand(resultSet.getString("brand"));
				candy.setFlavor(resultSet.getString("flavor"));
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return candy;
	}

	@Override
	public Set<Candy> getAll() {
		Set<Candy> allCandy = new HashSet<>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from candy";
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);
			
			// while the result set has another row
			while (resultSet.next()) {
				// create the Pet (in this case Candy) object
				Candy candy = new Candy();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				candy.setId(resultSet.getInt("id"));
				candy.setName(resultSet.getString("name"));
				candy.setBrand(resultSet.getString("brand"));
				candy.setFlavor(resultSet.getString("flavor"));
				
				allCandy.add(candy);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return allCandy;
	}

	// made by amplifire with small edits by sierra
	@Override
	public void update(Candy dataToUpdate) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);
			
			String sql = "update candy set "
					+ "name=?,brand=?,flavor=? "
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, dataToUpdate.getName());
			pStmt.setString(2, dataToUpdate.getBrand());
			pStmt.setString(3, dataToUpdate.getFlavor());
			pStmt.setInt(4, dataToUpdate.getId());
			//add boolean values?
			
			int rowsAffected = pStmt.executeUpdate();
			
			if (rowsAffected==1) {
				conn.commit();
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// made by synergy w/ edits by sierra
	@Override
	public void delete(Candy dataToDelete) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);

			String sql = "delete from candy "
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, dataToDelete.getId());

			int rowsAffected = pStmt.executeUpdate();

			if (rowsAffected==1) {
				//candy owner or buyer?
				sql="delete from candy_owner where candy_id=?";
				PreparedStatement pStmt2 = conn.prepareStatement(sql);
				pStmt2.setInt(1, dataToDelete.getId());
				rowsAffected = pStmt2.executeUpdate();
				
				if (rowsAffected<=1) {
					conn.commit();
				} else {
					conn.rollback();
				}
			} else {
				conn.rollback();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// made by alchemy w/ small edits by sierra
	@Override
	public Set<Candy> getByStatus(String status) {
		Set<Candy> allCandy = new HashSet<>();

		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from pet where status=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, status);
	
			ResultSet resultSet = pStmt.executeQuery();

			// while the result set has another row
			while (resultSet.next()) {
				// create the Pet object
				Candy candy = new Candy();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				candy.setId(resultSet.getInt("id"));
				candy.setName(resultSet.getString("name"));
				candy.setBrand(resultSet.getString("brand"));
				candy.setFlavor(resultSet.getString("flavor"));

				allCandy.add(candy);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return allCandy;
	}

}
